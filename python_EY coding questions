You are given an array of integers stones where stones[i] represents the weight of the ith stone.
We want to run a simulation on the stones as follows:
At each step we choose the two heaviest stones, with weight x and y and smash them togethers
If x == y, both stones are destroyed
If x < y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
Continue the simulation until there is no more than one stone remaining.
Return the weight of the last remaining stone or return 0 if none remain.
Example 1:
Input: stones = [2,3,6,2,4]Output: 1

ANSWER

import heapq

def last_stone_weight(stones):
    # Convert to max heap by negating the values
    max_heap = [-s for s in stones]
    heapq.heapify(max_heap)

    while len(max_heap) > 1:
        # Pop two largest stones
        first = -heapq.heappop(max_heap)
        second = -heapq.heappop(max_heap)

        if first != second:
            # Push the result of smashing back into heap
            heapq.heappush(max_heap, -(first - second))

    return -max_heap[0] if max_heap else 0

# Example
stones = [2, 3, 6, 2, 4]
print(last_stone_weight(stones))  # Output: 1


def first_unique_char(s):
    from collections import Counter

    freq = Counter(s)

    for char in s:
        if freq[char] == 1:
            return char
    return None  # or return '' if you prefer


